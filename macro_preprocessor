#!/usr/bin/env python3

import sys
import glob
import itertools
import argparse
import os
import re

DEFAULT_FILE_NAME="<unknown file obj>"


class SourceState:
    OUTSIDE = 0
    INSIDE = 1

class Location:
    def __init__(self, line, file_name=DEFAULT_FILE_NAME):
        self.line = line
        self.file_name = file_name

    def increment_line(self, count):
        return Location(self.line + count, self.file_name)

    def advance(self, body):
        return self.increment_line(body.count("\n"))

    def __str__(self):
        return "%s:%d" % (self.file_name, self.line)

    def __repr__(self):
        return str(self)

class Macro:
    def __init__(self, name, arg_names, body, location=None):
        self.name = name
        self.arg_names = arg_names
        self.body = body
        self.location = location

    def run(self, arg_vals):
        out = self.body
        if len(arg_vals) != len(self.arg_names):
            raise RuntimeError("Invalid number of arguments (got %d, expected %d) in macro %s" % \
                    (len(arg_vals), len(self.arg_names), self.name))
        for name, val in zip(self.arg_names, arg_vals):
            out = out.replace(name, val)
        return out

    def __str__(self):
        return "macro %s(%s) @%s" % (self.name, ", ".join(self.arg_names), self.location)

    def __repr__(self):
        return str(self)

class RegexpPair:
    def __init__(self, evt, reg):
        self.evt = evt
        self.reg = reg

class MacroRegexps():
    def __init__(self, comment="//", open_comment="/*", close_comment="*/"):
        comment_start = "(" + re.escape(comment) + "|" + re.escape(open_comment) + ")"
        # comment_end = r"(?:\s*$|" + re.escape(close_comment) + r")"
        def wrap(reg):
            return (r"(?:" + re.escape(comment) + reg + r"[ \t]*\n|" + \
                    re.escape(open_comment) + reg + r"[ \t]*" + re.escape(close_comment) + r")")
        self.def_start = RegexpPair(Events.DEF_START, re.compile(comment_start + 
                r"#define ([A-Za-z0-9_]+)\s+"))
        self.def_end = RegexpPair(Events.DEF_END, re.compile(wrap(r"#end")))
        self.import_statement = RegexpPair(Events.IMPORT, re.compile(wrap(r"#import\s+(\S.*)")))
        self.call_start = RegexpPair(Events.CALL, re.compile(comment_start +
                r"#macro ([A-Za-z0-9_]+)\s+"))

class Events:
    DEF_START = 0
    DEF_END = 1
    IMPORT = 2
    CALL = 3

class ArgStates:
    BETWEEN_ARGS=0
    INSIDE_ARG=1

def closest(body, regexp_pairs):
    possible = [(pair, res) for (pair, res) in
            ((pair, pair.reg.search(body)) for pair in regexp_pairs)
            if res is not None]
    if len(possible) == 0:
        return None
    return min(possible, key=lambda x: x[1].span()[0])

class Preprocessor:
    def __init__(self, comment="//", open_comment="/*", close_comment="*/"):
        self.macros = dict()
        self.comment = comment
        self.open_comment = open_comment
        self.close_comment = close_comment
        self.regexps = MacroRegexps(comment)

    def process(self, go_file, file_name=DEFAULT_FILE_NAME, write=lambda x: print(x), header=True):
        if header:
            for line in self._header(file_name):
                write(line)
        macros = {}
        loc = Location(1, file_name)
        body = go_file.read()
        def advance(to):
            nonlocal loc
            nonlocal body
            prefix = body[:to]
            loc = loc.advance(prefix)
            body = body[to:]
            return prefix
        while True:
            pairs = [self.regexps.def_start, self.regexps.import_statement, self.regexps.call_start]
            next_match = closest(body, pairs)
            if next_match is None:
                break
            pair, match = next_match
            if pair.evt == Events.DEF_START:
                start, end = match.span()
                write(advance(start))
                macro_loc = loc
                advance(end - start)
                comment_start = match.group(1)
                multiline = (comment_start == self.open_comment)
                name = match.group(2)
                try:
                    args, length = self._parse_args(body, multiline)
                except RuntimeError as e:
                    raise RuntimeError("%s. Error encountered parsing argument list: %s" % (macro_loc, e))
                advance(length)
                match = self.regexps.def_end.reg.search(body)
                if match is None:
                    raise RuntimeError("%s. No end to macro declaration found." % (macro_loc))
                start, end = match.span()
                macro_body = advance(start)
                advance(end - start)
                if name in macros:
                    print("%s. WARNING: Macro %s defined at %s was previously defined at %s. Using definition at %s from now on." % (macro_loc, name, macro_loc, macros[name].location, macro_loc), file=sys.stderr)
                macros[name] = Macro(name, args, macro_body, macro_loc)
            elif pair.evt == Events.IMPORT:
                start, end = match.span()
                write(advance(start))
                import_loc = loc
                advance(end - start)
                path = match.group(1)
                path = os.path.expandvars(path) 
                if file_name != DEFAULT_FILE_NAME and os.path.exists(file_name):
                    rel_start = os.path.dirname(os.path.abspath(file_name))
                else:
                    rel_start = os.curdir
                path = os.path.join(rel_start, path)
                if not os.path.exists(path):
                    raise RuntimeError("%s. Imported file %s does not exist." % (import_loc, path))
                try:
                    with open(path, "r") as f:
                        imported_macros = self.process(f, file_name=path, write=write, header=False)
                        for name, macro in imported_macros.items():
                            if name in macros:
                                print("%s. WARNING: Macro %s defined at %s was previously defined at %s. Using definition at %s from now on." % (import_loc, name, imported_macros[name].location, macros[name].location, imported_macros[name].location), file=sys.stderr)
                            macros[name] = imported_macros[name]
                except Exception as e:
                    raise RuntimeError("%s. Error parsing file %s: %s" % (import_loc, path, e))
            elif pair.evt == Events.CALL:
                start, end = match.span()
                write(advance(start))
                macro_loc = loc
                advance(end - start)
                comment_start = match.group(1)
                multiline = (comment_start == self.open_comment)
                name = match.group(2)
                if name not in macros:
                    raise RuntimeError("%s. Call to undefined macro, %s." % (macro_loc, name))
                try:
                    args, length = self._parse_args(body, multiline)
                except RuntimeError as e:
                    raise RuntimeError("%s. Error encountered parsing argument list: %s" % (macro_loc, e))
                advance(length)
                try:
                    for line in macros[name].run(args):
                        write(line)
                except RuntimeError as e:
                    raise RuntimeError("%s. Error encountered evaluating macro %s: %s" % (macro_loc, name, e))
        write(body)
        return macros


    def _parse_args(self, body, multiline):
        state = ArgStates.BETWEEN_ARGS
        parens = 0
        args = []
        arg = ""
        end = self.close_comment if multiline else "\n" 
        end_match = 0
        for i, c in enumerate(body):
            if state == ArgStates.BETWEEN_ARGS:
                if c == end[end_match]:
                    end_match += 1
                    if end_match == len(end):
                        break
                elif end_match > 0:
                    raise RuntimeError("Unexpected character: %s at position %d" % (c, i + 1 - end_match))
                elif c == "(":
                    arg = ""
                    state = ArgStates.INSIDE_ARG
                    parens = 1
                elif c in " \t":
                    pass
                elif c == "\n" and multiline:
                    pass
                else:
                    raise RuntimeError("Unexpected character: %s at position %d" % (c, i + 1))
            elif state == ArgStates.INSIDE_ARG:
                if c == "(":
                    parens += 1
                    arg += c
                elif c == ")":
                    parens -= 1
                    if parens == 0:
                        args.append(arg)
                        state = ArgStates.BETWEEN_ARGS
                    else:
                        arg += c
                elif c in "\r\n" and not multiline:
                    raise RuntimeError("A newline occurred in a single line argument list.")
                else:
                    arg += c
            else:
                assert False, "Illegal state."
        return args, i + 1
    
    def _header(self, file_name=DEFAULT_FILE_NAME):
        yield "%s .----------------------------------------.\n" % self.comment
        yield "%s |      WARNING: AUTO-GENERATED CODE      |\n" % self.comment
        yield "%s .----------------------------------------.\n" % self.comment
        yield "%s This code was automatically generated using\n" % self.comment
        yield "%s https://github.com/PoshDev/macro-preprocessor .\n" % self.comment
        if file_name != DEFAULT_FILE_NAME:
            yield "%s The original source file was %s.\n" % (self.comment, file_name)
        yield "%s XXX: DO NOT CHANGE THIS FILE!!!\n" % self.comment

    @classmethod
    def preprocess(cls, outfile="/dev/stdout", infile="/dev/stdin", comment="//"):
        self = cls(comment)
        with open(infile, "r") as f:
            with open(outfile, "w") as of:
                self.process(f, infile, write=lambda x: of.write(x))
        return self

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='A simple language-agnostic string-based (no AST) macro preprocessor')
    parser.add_argument('-i', '--input', type=str, dest="infile", default="&0",
                                help='file to preprocess')
    parser.add_argument('-o', '--output', type=str, dest="outfile", default="&1",
                                help='postprocessed file saved to')
    parser.add_argument('-c', '--comment', type=str, dest="comment", default="//",
                                help='string for starting a line comment')
    args = vars(parser.parse_args())
    special_replace = {"&0": "/dev/stdin",
            "&1": "/dev/stdout", "&2": "/dev/stderr", "-": "/dev/stdout"}
    args["infile"] = special_replace.get(args["infile"], args["infile"])
    args["outfile"] = special_replace.get(args["outfile"], args["outfile"])
    assert os.path.exists(args["infile"]), args["infile"]
    Preprocessor.preprocess(**args)
